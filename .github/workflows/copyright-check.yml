name: Copyright Validation

on:
  workflow_call:

jobs:
  copyright-check:
    name: Validate Copyright Headers
    runs-on: ubuntu-latest

    steps:
    - name: Checkout PR head
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        path: target-repo

    - name: Checkout pr-workflows repo
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository_owner }}/pr-workflows
        ref: copyright
        path: pr-workflows

    - name: Setup config
      id: setup-config
      run: |
        cfg="target-repo/.copyrightconfig"
        if [ ! -f "$cfg" ]; then
          git clone --depth 1 --branch ${{ github.event.pull_request.base.ref }} \
            https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git base-repo
          [ -f base-repo/.copyrightconfig ] && cfg="base-repo/.copyrightconfig"
        fi
        [ -f "$cfg" ] || { echo "missing config"; exit 1; }
        [ -s "$cfg" ] || { echo "empty config"; exit 1; }
        grep -q '^startyear:' "$cfg" || { echo "startyear missing"; exit 1; }
        echo "config-file=$cfg" >> $GITHUB_OUTPUT

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Get changed files
      id: changed-files
      run: |
        cd target-repo
        base_sha="${{ github.event.pull_request.base.sha }}"
        head_sha="${{ github.event.pull_request.head.sha }}"
        git fetch origin ${{ github.event.pull_request.base.ref }}
        git diff --name-only --diff-filter=AMR "$base_sha" "$head_sha" | while read f; do [ -f "$f" ] && echo "$f"; done > ../files_to_check.txt
        count=$(wc -l < ../files_to_check.txt | tr -d ' ')
        if [ "$count" -eq 0 ]; then
          echo "skip-validation=true" >> $GITHUB_OUTPUT
        else
          echo "skip-validation=false" >> $GITHUB_OUTPUT
        fi
        echo "files-count=$count" >> $GITHUB_OUTPUT

    - name: Validate
      id: validate
      if: steps.changed-files.outputs.skip-validation != 'true'
      continue-on-error: true
      run: |
        script="pr-workflows/scripts/copyrightcheck.py"
        cfg="${{ steps.setup-config.outputs.config-file }}"
        [ -f "$script" ] || { echo "script missing"; exit 1; }
        chmod +x "$script"
        files=$(tr '\n' ' ' < files_to_check.txt)
        python3 "$script" --config "$cfg" --working-dir target-repo $files > validation_output.txt 2>&1
        ec=$?
        if [ $ec -eq 0 ]; then echo "status=success" >> $GITHUB_OUTPUT; else echo "status=failed" >> $GITHUB_OUTPUT; fi
        exit $ec

    - name: Extract Markdown summary
      if: always() && steps.changed-files.outputs.skip-validation != 'true'
      run: |
        awk '/^<<<COPYRIGHT-CHECK:MARKDOWN>>>/{f=1;next}/^<<<END COPYRIGHT-CHECK:MARKDOWN>>>/{f=0}f' validation_output.txt > summary.md
        cat summary.md >> "$GITHUB_STEP_SUMMARY"

    - name: Annotations (from markdown)
      if: always() && steps.changed-files.outputs.skip-validation != 'true'
      run: |
        python3 - <<'PY'
        import re, sys
        from textwrap import shorten
        md=open('summary.md').read()
        lines=[l.rstrip('\n') for l in md.splitlines()]
        # Extract counts
        counts_line=None
        for l in lines:
            if l.startswith('Total:') or l.startswith('Total '):
                counts_line=l
                break
        if not counts_line and len([l for l in lines if l.strip()])>=2:
            counts_line=[l for l in lines if l.strip()][1]
        pat=r"Total:\s*(\d+).*?Passed:\s*(\d+).*?Failed:\s*(\d+)(?:.*?Skipped:\s*(\d+))?"
        m=re.search(pat, counts_line or '')
        counts={'total':0,'valid':0,'invalid':0,'excluded':0}
        if m:
            counts['total']=int(m.group(1)); counts['valid']=int(m.group(2)); counts['invalid']=int(m.group(3)); counts['excluded']=int(m.group(4) or 0 if m.lastindex>=4 else 0)
        # Parse sections
        section=None
        failed=[]; skipped=[]; passed=[]
        current_fail=None
        for l in lines:
            ls=l.strip()
            if ls.startswith('### '):
                if 'Failed Files' in ls: section='failed'
                elif 'Skipped Files' in ls: section='skipped'
                elif 'Passed Files' in ls: section='passed'
                else: section=None
                continue
            if not ls:
                if section=='failed' and current_fail:
                    failed.append(current_fail); current_fail=None
                continue
            if section=='failed':
                if ls.startswith('❌ '):
                    if current_fail: failed.append(current_fail)
                    current_fail={'file': ls[2:].strip(), 'found':None,'expected':None,'error':None}
                elif ls.startswith('Found:') and current_fail:
                    current_fail['found']=ls[len('Found:'):].strip()
                elif ls.startswith('Expected:') and current_fail:
                    current_fail['expected']=ls[len('Expected:'):].strip()
                elif ls.startswith('Error:') and current_fail:
                    current_fail['error']=ls[len('Error:'):].strip()
            elif section=='skipped' and ls.startswith('⏭️ '):
                skipped.append(ls[2:].strip())
            elif section=='passed' and ls.startswith('✅ '):
                passed.append(ls[2:].strip())
        if section=='failed' and current_fail:
            failed.append(current_fail)
        # Build summary annotation
        summary=f"Total {counts['total']} | Passed {counts['valid']} | Failed {counts['invalid']}" + (f" | Skipped {counts['excluded']}" if counts['excluded'] else '')
        if counts['invalid']>0:
            print(f"::error title=Copyright Summary::{summary}")
        else:
            print(f"::notice title=Copyright Summary::{summary}")
        # Failed file annotations (limit to 20 to avoid noise)
        for f in failed[:20]:
            details=[]
            if f.get('found'): details.append(f"Found={shorten(f['found'], width=140, placeholder='…')}")
            if f.get('expected'): details.append(f"Expected={shorten(f['expected'], width=140, placeholder='…')}")
            if f.get('error'): details.append(f"Error={shorten(f['error'], width=140, placeholder='…')}")
            detail_str=' | '.join(details)
            print(f"::error title=Invalid:{f['file']}::{detail_str}")
        more=len(failed)-len(failed[:20])
        if more>0:
            print(f"::error title=Invalid (truncated)::+{more} more invalid files not listed")
        # Skipped files annotation
        if skipped:
            sk_list= ', '.join(skipped[:30])
            more=len(skipped)-len(skipped[:30])
            if more>0: sk_list += f" (+{more} more)"
            print(f"::notice title=Skipped Files::{sk_list}")
        # Passed files annotation (only if no failures to reduce noise)
        if passed and not failed:
            p_list=', '.join(passed[:30])
            more=len(passed)-len(passed[:30])
            if more>0: p_list+=f" (+{more} more)"
            print(f"::notice title=Passed Files::{p_list}")
        PY

    - name: Fail if needed
      if: always() && steps.changed-files.outputs.skip-validation != 'true'
      run: |
        [ "${{ steps.validate.outputs.status }}" = "success" ] || exit 1

    - name: No-op summary
      if: steps.changed-files.outputs.skip-validation == 'true'
      run: echo "::notice title=Copyright Check::No files to validate"

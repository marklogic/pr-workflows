name: Copyright Validation

on:
  workflow_call:

jobs:
  copyright-check:
    name: Validate Copyright Headers
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
    - name: Checkout PR head
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        path: target-repo

    - name: Checkout pr-workflows repo
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository_owner }}/pr-workflows
        ref: copyright
        path: pr-workflows

    - name: Setup config
      id: setup-config
      run: |
        cfg="target-repo/.copyrightconfig"
        if [ ! -f "$cfg" ]; then
          git clone --depth 1 --branch ${{ github.event.pull_request.base.ref }} \
            https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git base-repo
          [ -f base-repo/.copyrightconfig ] && cfg="base-repo/.copyrightconfig"
        fi
        [ -f "$cfg" ] || { echo "missing config"; exit 1; }
        [ -s "$cfg" ] || { echo "empty config"; exit 1; }
        grep -q '^startyear:' "$cfg" || { echo "startyear missing"; exit 1; }
        echo "config-file=$cfg" >> $GITHUB_OUTPUT

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Get changed files
      id: changed-files
      run: |
        cd target-repo
        base_sha="${{ github.event.pull_request.base.sha }}"
        head_sha="${{ github.event.pull_request.head.sha }}"
        git fetch origin ${{ github.event.pull_request.base.ref }}
        git diff --name-only --diff-filter=AMR "$base_sha" "$head_sha" | while read f; do [ -f "$f" ] && echo "$f"; done > ../files_to_check.txt
        count=$(wc -l < ../files_to_check.txt | tr -d ' ')
        if [ "$count" -eq 0 ]; then
          echo "skip-validation=true" >> $GITHUB_OUTPUT
        else
          echo "skip-validation=false" >> $GITHUB_OUTPUT
        fi
        echo "files-count=$count" >> $GITHUB_OUTPUT

    - name: Validate
      id: validate
      if: steps.changed-files.outputs.skip-validation != 'true'
      continue-on-error: true
      run: |
        script="pr-workflows/scripts/copyrightcheck.py"
        cfg="${{ steps.setup-config.outputs.config-file }}"
        [ -f "$script" ] || { echo "script missing"; exit 1; }
        chmod +x "$script"
        files=$(tr '\n' ' ' < files_to_check.txt)
        python3 "$script" --config "$cfg" --working-dir target-repo $files > validation_output.txt 2>&1
        ec=$?
        if [ $ec -eq 0 ]; then echo "status=success" >> $GITHUB_OUTPUT; else echo "status=failed" >> $GITHUB_OUTPUT; fi
        exit $ec

    - name: Extract Markdown summary
      if: always() && steps.changed-files.outputs.skip-validation != 'true'
      run: |
        awk '/^<<<COPYRIGHT-CHECK:MARKDOWN>>>/{f=1;next}/^<<<END COPYRIGHT-CHECK:MARKDOWN>>>/{f=0}f' validation_output.txt > summary.md
        echo '----- BEGIN COPYRIGHT SUMMARY (also in Job Summary) -----'
        cat summary.md
        echo '----- END COPYRIGHT SUMMARY -----'
        cat summary.md >> "$GITHUB_STEP_SUMMARY"

    - name: Post / Update PR comment with summary
      if: always() && steps.changed-files.outputs.skip-validation != 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (!context.payload.pull_request) {
            core.info('No pull_request in context, skipping comment.');
            return;
          }
          const mdRaw = fs.readFileSync('summary.md','utf8');
          const sha = context.payload.pull_request.head.sha;
          const md = mdRaw.endsWith('\n') ? mdRaw + `_Commit: ${sha}_` : mdRaw + `\n_Commit: ${sha}_`;
          const number = context.payload.pull_request.number;
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: number,
            per_page: 100
          });
          const existing = comments.find(c => c.body.startsWith('## ✅ Copyright Validation') || c.body.startsWith('## ❌ Copyright Validation'));
          if (existing) {
            core.info(`Updating existing summary comment ${existing.id}`);
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existing.id,
              body: md
            });
          } else {
            core.info('Creating new summary comment');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: number,
              body: md
            });
          }

    - name: Fail if needed
      if: always() && steps.changed-files.outputs.skip-validation != 'true'
      run: |
        [ "${{ steps.validate.outputs.status }}" = "success" ] || exit 1

    - name: No-op summary
      if: steps.changed-files.outputs.skip-validation == 'true'
      run: echo "::notice title=Copyright Check::No files to validate"
